/*Напиши програма која ќе ги отпечати содржините прочитани од стандарден влез, но шифрирани. Шифрирањето се прави буква по буква така што секоја буква (само букви, без цифри, точки, и други знаци) се заменува со буквата што е 3 места понапред во азбуката. Ако буквата е на крајот од азбуката, броењето продолжува циклично од почетокот на азбуката. Во финалниот кодираниот текст, сите букви треба да бидат со мали букви.

Пример:

буква 'a' ќе се шифрира како 'd'

буква 'H' ќе се шифрира како 'k'

буква 'p' ќе се шифрира како 's'

буква 'x' ќе се шифрира како 'a'
  */

#include <iostream>
#include <cstring>
#include <cctype>
using namespace std;

char shiftChar(char c) {
    c = tolower(c);
    if (c >= 'a' && c <= 'z') {
        c = ((c - 'a' + 3) % 26) + 'a';
    }
    return c;
}

int main() {
    char line[1001];  // Дефинираме голем низ за влез, можеш да го зголемиш по потреба

    while (cin.getline(line, 1001)) {
        int len = strlen(line);
        for (int i = 0; i < len; i++) {
            char c = line[i];
            if (isalpha(c)) {
                cout << shiftChar(c);
            } else {
                cout << c;
            }
        }
        cout << endl;
    }

    return 0;
}



/*
c е еден карактер (буква), веќе претворен во мало слово (со tolower).

Буквите од латинската азбука имаат ASCII вредности од 'a' (97) до 'z' (122).

Целта е да го поместиш карактерот c за 3 места понатаму во азбуката.

Ако стигнеш до крајот на азбуката ('z'), продолжуваш од почетокот ('a') — т.е. циклично.


Објаснување чекор по чекор:
1. c - 'a'
Ова ја претвора буквата c во позиција во азбуката почнувајќи од 0.

На пример, ако c = 'a', тогаш c - 'a' = 0.

Ако c = 'b', тогаш c - 'a' = 1.

Ако c = 'z', тогаш c - 'a' = 25.

Со други зборови, сега го претвораш карактерот во број помеѓу 0 и 25 (позиција во азбуката).

2. c - 'a' + 3
Овде го поместуваш бројот за 3 позиции понатаму.

Ако е a (позиција 0), станува 3 (што ќе биде буква 'd').

Ако е x (позиција 23), станува 26.

3. (c - 'a' + 3) % 26
% 26 значи земи остаток при делење со 26.

Ова го прави циклусот — ако бројот стане 26 или повеќе, ќе започне од почеток.

На пример:

За 'x' → позиција 23 + 3 = 26 → 26 % 26 = 0 → повторно 'a'.

За 'y' → 24 + 3 = 27 → 27 % 26 = 1 → 'b'.

За 'z' → 25 + 3 = 28 → 28 % 26 = 2 → 'c'.

4. + 'a'
Откако сме го добиле бројот од 0 до 25, сега го претвораме назад во ASCII карактер.

Ако е 0, се добива 'a'.

Ако е 3, се добива 'd', и така натаму.
Азбуката има 26 букви, од 0 до 25.

Ако одиме надвор од оваа граница, треба да се вратиме на почетокот.

Тоа значи дека ако добиеме број поголем од 25, го делиме со 26 и го земаме остатокот.

За 'z': 25 + 3 = 28
28 % 26 = 2 → позиција 2, што е буква 'c'

Значи:

Поместувањето е циклично: по 'z' следува 'a', 'b', 'c' итн.

4. Што прави + 'a' на крајот?
Откако ќе го добиеме бројот поместен за 3 и земен остатокот % 26, тоа е број од 0 до 25.

За да го претвориме повторно во карактер (буква), му додававме 'a'.

Ако имаме број 3, 3 + 'a' = 'd' (ASCII код на 'a' + 3 → буква 'd')

*/
