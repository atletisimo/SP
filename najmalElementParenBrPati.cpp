#include <iostream>
using namespace std;

int par(int a[], int n) {
    int minElem = 101; // бидејќи N <= 100, сите елементи се <= 100
    bool found = false;

    for (int i = 0; i < n; i++) {
        int count = 0;//Сакаме секојпат кога i се менува, count повторно да започне од 0.
//Ако count стои надвор од for, тогаш ќе ги собира сите вредности од сите итерации, што не треба да се случува

        // Провери дали оваа вредност веќе е проверена
        bool alreadyChecked = false;
        for (int j = 0; j < i; j++) {
            if (a[i] == a[j]) {
                alreadyChecked = true;
                break;//break; излегува само од внатрешната for (int j = 0; j < i; j++) петља, значи не ја прекинува надворешната for (int i = 0; i < n; i++).
                ////тогаш го ставаме alreadyChecked = true, и излегуваме од внатрешната for (што има смисла, нема потреба да проверуваме понатаму).
            }
        }
        if (alreadyChecked) continue;//if (alreadyChecked) continue;
//Ако a[i] веќе е проверен, тогаш не го броиме пак и продолжуваме со следниот i.
//continue; ја пропушта целата останата логика за a[i] и директно продолжува со следното i во надворешната for.
//ако најдеме дека a[i] == a[j], тогаш веќе сме го провериле a[i] порано — значи дупликат е.

        
        // Брои колку пати се појавува a[i]
        for (int j = 0; j < n; j++) {
            if (a[j] == a[i]) {
                count++;
            }
        }

        // Дали се појавува парен број пати?
        if (count % 2 == 0) {
            if (a[i] < minElem) {
                minElem = a[i];
                found = true;
            }
        }
    }

    if (found)
        return minElem;
    else
        return 0;
}

int main() {
    int n;
    int a[100];
    cin >> n;

    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    cout << par(a, n) << endl;
}


/*
Надворешниот for циклус започнува со i = 0.

Потоа веднаш се влегува во внатрешниот for циклус, кој започнува со j = 0.

Внатрешниот циклус се извршува целосно за секое i. Значи:

j = 0 → 1 → 2 → 3 (затоа што j < 4)

Штом внатрешниот циклус заврши, се зголемува i за 1 (i = 1) и повторно се влегува во внатрешниот циклус од почеток, со j = 0.

Повторно: j = 0 → 1 → 2 → 3

Тоа се повторува додека i < 4.






*/
